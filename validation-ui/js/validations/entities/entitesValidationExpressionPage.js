

var stringArray = [];
var suggestionTag = "";
var cursorPosX = 0;
var cursorPosY = 0;
var minWordLength = 1;
var availableTags = [];
var columnTag = [];
var expressionObj = {};
var rootColumn = ["ENT"]; //dd changes
var opsWithSquareBracket = ["ENDS", "CONTAINS", "NOTIN", "IN", "BETWEEN"];
var commasCount = 0;
var level = 0;
var autocomplete = "";
var returns;
var ddEntity = {};
var sections = {};
var lineItems = {};
var rtnSection;
var rtnReturns;
var lastSelectedElm;
var intervalForSelection;
$(document).ready(function() {



    (function($) {

        // Extend the autocomplete widget, using our own application namespace.
        $.widget("app.autocomplete", $.ui.autocomplete, {

            // The _renderItem() method is responsible for rendering each
            // menu item in the autocomplete menu.
            _renderItem: function(ul, item) {

                // We want the rendered menu item generated by the default implementation.
                var result = this._super(ul, item);

                // If there is logo data, add our custom CSS class, and the specific
                // logo URL.
                if (item.logo) {
                    result.find("a")
                        .addClass("ui-menu-item-icon")
                        .css("background-image", "url(" + item.logo + ")");
                }

                return result;

            }

        });

    })(jQuery);
    $(document).on("keyup", function(e) {
        if (msieversion()) {
            var vKeyCode = ((event.keyCode) ? event.keyCode : event.which);
            if (vKeyCode == 13) {
                availableTags = [];
            }
            if (vKeyCode == 38 || vKeyCode == 40) {
                if (!$(':focus').hasClass("focusClass")) {
                    //clearAllGlobalParams();
                    $($(".focusClass")[0]).focus();
                    //testFunc();
                }
            }
        }

    })
    $("#validationDescriptionTextArea").on("keyup change click paste", function(e) {
        var vKeyCode = ((event.keyCode) ? event.keyCode : event.which);
        if ($('#validationDescriptionTextArea').val().length > 1) {
            var position = getCaretPosition($('#validationDescriptionTextArea')[0]);
            cursorPosY = 17 + position.y - $('#validationDescriptionTextArea')[0].getBoundingClientRect().top;
            cursorPosX = position.x - $('#validationDescriptionTextArea')[0].getBoundingClientRect().left;
            if (availableTags.length > 0) {
                $("#ui-id-1").addClass("vDropDownIE");
                $(".expression-auto").addClass("vDropDownIE");
            } else {
                $("#ui-id-1").removeClass("vDropDownIE");
                $(".expression-auto").removeClass("vDropDownIE");
            }
        }
        if (event.type == "paste") {
            var clipboardText = event.clipboardData.getData('text/plain');
            if (clipboardText.indexOf("FOREACH(") != -1 && clipboardText.indexOf("RTN") != -1) {
                var rtnIndex = clipboardText.indexOf("RTN");
                getExprForPasteEvent(rtnIndex, clipboardText);
            }
        } else if (vKeyCode == 13 || vKeyCode == 190 || vKeyCode == 8 || vKeyCode == 37 || vKeyCode == 38 || vKeyCode == 39 || vKeyCode == 40 || vKeyCode == "click") {
            if (msieversion()) {
                if (vKeyCode == 38 || vKeyCode == 40) {
                    e.stopPropagation();
                    handleSelectionOfValueFromKeyboard(e);
                    return;
                } else {
                    availableTags = [];
                    getColumnDetailsForAutoSuggestion(e);
                }
            } else {
                getColumnDetailsForAutoSuggestion(e);
            }



        }
        if (inputExp("column").split(".")[0].toUpperCase() == "RTN" || inputExp("column").split(".")[0].toUpperCase() == "REFTBL" || inputExp("column").split(".")[0].toUpperCase() == "ENT" || (inputExp("column").split(".")[0].toUpperCase() == "ME" && inputExp("column").split(".").length == 2)) { //dd changes
            var input = document.getElementById("validationDescriptionTextArea");
            var inputContent = input.value.length;
            var inputText = document.getElementById("validationDescriptionTextArea").value;
            //input.focus();
            var result = getInputSelection(input);
            var i = result.start - 1;
            var openQuote = false;
            var closeQuote = false;
            var spclChar = '[(){}+-*/=><!\n,.';
            for (var j = i; j >= 0; j--) {
                if (spclChar.indexOf(inputText[j]) != -1) {
                    break;
                } else if (inputText[j] == '"') {
                    openQuote = true;
                    break;
                }
            }
            for (var j = i + 1; j < inputText.length && i != inputText.length - 1; j++) {
                if (spclChar.indexOf(inputText[j]) != -1) {
                    break;
                } else if (inputText[j] == '"') {
                    closeQuote = true;
                    break;
                }
            }
            if (openQuote == true && closeQuote == true) {
                if (vKeyCode != 38 && vKeyCode != 40) {
                    availableTags = columnTag;
                    minWordLength = 0;
                    $("#validationDescriptionTextArea").autocomplete({
                        source: availableTags,
                        minLength: 0
                    });
                    var rtnData = inputExp("column").split('.');
                    $("#validationDescriptionTextArea").autocomplete("search", rtnData[rtnData.length - 1].replace(/"/g, ''));
                    if (availableTags.length > 0) {
                        $("#ui-id-1").addClass("vDropDownIE");
                        $(".expression-auto").addClass("vDropDownIE");
                    } else {
                        $("#ui-id-1").removeClass("vDropDownIE");
                        $(".expression-auto").removeClass("vDropDownIE");
                    }

                }
            } else {
                availableTags = [];
                $("#validationDescriptionTextArea").autocomplete("close");
                //$(".ui-autocomplete").css("display","none");
                $("#suggestiondivID").css("display", "none");
                $("#suggestiondivID").css("display", "none");
                $("#ui-id-1").removeClass("vDropDownIE");
                $(".expression-auto").removeClass("vDropDownIE");

            }

        } else {
            availableTags = stringArray.concat(rootColumn);
            minWordLength = 1;
            autoComplete();
            if (vKeyCode != 38 && vKeyCode != 40) {
                $("#ui-id-1").empty();
                var functionData = inputExp();
                $("#validationDescriptionTextArea").autocomplete("search", functionData);
                if ($("#validationDescriptionTextArea").val().length > 0 && availableTags.length > 0 && $("#ui-id-1").children().length > 0) {
                    $("#ui-id-1").addClass("vDropDownIE");
                    $(".expression-auto").addClass("vDropDownIE");
                } else {
                    $("#ui-id-1").removeClass("vDropDownIE");
                    $(".expression-auto").removeClass("vDropDownIE");
                }

            }
        }
        callStringDescription(getInputForSuggestion());
        antlrValidation();
    });
    $('body').on('mousemove', function(event) {
        var parentElement = $(event.target).parent();
        if ($(parentElement).attr("class") == "ui-menu-item") {
            clearAllGlobalParams();
            $('.ui-menu-item').children().removeClass("focusClass");
            $(parentElement).children().addClass("focusClass");
            var parentOffset = parentElement.offset();
            getAutoSuggestHelpText($(event.target).text(), parentOffset.top, parentOffset.left + $(parentElement).parent().width() + 5);
        } else {
            $("#detailDivId").css("display", "none");
        }
    });
    var duplicateCheck = [];
    for (var i = 0; i < functionsAndOperatorArray.length; i++) {
        var data = functionsAndOperatorArray[i].name;
        if (duplicateCheck.indexOf(data) == -1 && functionsAndOperatorArray[i].include == "Y") {
            var sourceObj = {};
            sourceObj["label"] = data;
            sourceObj["logo"] = "./images/helpImg.png";
            stringArray.push(sourceObj);
            duplicateCheck.push(data);
        }
    }
});

function validate() {
    var parseResult;
    var fieldType;
    try {
        parseResult = expressionGrammar.parse($("#validationDescriptionTextArea").val());
        $("#validation-msg").empty();
        $("#validation-msg").append("<small class='vs-baseline-regular-black'>Expression Valid.</small>");
        $("#validation-msg").removeClass("error").addClass("success").css("display", "flex");
        $('#validationDescriptionTextArea').addClass('textarea-height');
        //validateExpression()
    } catch (e) {
        if (parseResult != true) {
            $("#validation-msg").empty();
            $("#validation-msg").append("<small class='vs-baseline-regular-black'>Validation Expression Syntax is wrong.</small>");
            $("#validation-msg").removeClass("success").addClass("error").css("display", "flex");
            $('#validationDescriptionTextArea').addClass('textarea-height');
        }
    }
}

function inputExp(val) {
    // availableTags = stringArray.concat(columnTag.concat(rootColumn));
    var input = document.getElementById("validationDescriptionTextArea");
    var inputContent = input.value.length;
    var inputText = document.getElementById("validationDescriptionTextArea").value;
    input.focus();
    var result = getInputSelection(input);
    var i = result.start - 1;
    var ch = "";
    var spclChar = "";
    if (val == "column")
        spclChar = "[(){}+-*/=><!\n,";
    else
        spclChar = '[(){}+-*/ =><!\n,."';
    if (inputText[i] == " ") {
        return " ";
    }
    while (spclChar.indexOf(inputText[i]) == -1 && i >= 0) {
        ch = inputText[i] + ch;
        i--;
    }
    if (val == "desc" && ch == "" && spclChar.indexOf(inputText[i]) != -1) {
        i--;
        while (spclChar.indexOf(inputText[i]) == -1 && i >= 0) {
            ch = inputText[i] + ch;
            i--;
        }
    }
    return ch;
}

function getExprForPasteEvent(index, clipboardText) {
    var spclChar = "[(){}+-*/=><!\n,";
    for (var i = index; i < clipboardText.length; i++) {
        if (spclChar.indexOf(clipboardText[i]) != -1) {
            index = i - 1;
            break;
        }
    }
    var ch = "";
    while (spclChar.indexOf(clipboardText[index]) == -1 && index >= 0) {
        ch = clipboardText[index] + ch;
        index--;
    }
    var rtnTextSplit = ch.split(".");
    rtnSection = rtnTextSplit[2].replace(/"/g, '');
    rtnReturns = rtnTextSplit[1].replace(/"/g, '');
    availableTags = [];
    columnTag = [];
    var effectiveDate = $("#date-picker-id").data('datepicker').getFormattedDate('dd-mm-yyyy');
    getLineItemDetailsForSuggestion(effectiveDate, rtnReturns, rtnSection, "GRID", "undefined", "undefined");
}

function extractLast(term) {
    return inputExp();
}

function autoComplete() {
    $("#validationDescriptionTextArea").autocomplete({
        minLength: minWordLength,
        source: function(request, response) {
            var term = extractLast(request.term);
            if (term.length >= minWordLength) {
                var filteredValue = $.ui.autocomplete.filter(availableTags, term);
                if (filteredValue.length > 0) {
                    getAutoSuggestHelpText(filteredValue[0], cursorPosY + 10, cursorPosX + $('.ui-autocomplete').width() + 20);
                } else {
                    $("#detailDivId").css("display", "none");
                }
                response(filteredValue);
            } else {
                response($.ui.autocomplete.filter("", term));
            }
            var suggestionObj = getInputForSuggestion();
            callStringDescription(suggestionObj);
            //checkElementForSuggestion(inputExp("desc"));
            //$("#detailDivId").css("display","block").css("top", cursorPosY+10).css("left", cursorPosX+$('.ui-autocomplete').width()+20);

        },
        focus: function(event, ui) {
            event.preventDefault();
            var menu = $(this).data("appAutocomplete").menu.element,
                focused = menu.find("li:has(a.ui-state-focus)");
            var focusedElemOffset = $(focused).offset();
            getAutoSuggestHelpText($(focused).text(), focusedElemOffset.top, focusedElemOffset.left + $(focused).parent().width() + 5);
            menu.find("li:not(:has(a.ui-state-focus))").children().removeClass("focusClass");
            menu.find("li:has(a.ui-state-focus)").children().addClass("focusClass");
            focused.focus();
        },

        select: function(event, ui) {
            var isStringPresent = false;
            var isColumnPresent = false;
            var factors = inputExp("column");
            if (factors.split(".")[0].toUpperCase() == "RTN" && factors.split(".").length == 3) {
                rtnSection = ui.item.value;
                rtnReturns = factors.split(".")[1].replace(/"/g, '');
            }
            var stringValue = ui.item.value;
            stringArray.forEach(function(item, index) {
                if (item.label == ui.item.value) {
                    isStringPresent = true;
                }
            })
            columnTag.forEach(function(item, index) {
                if (item.label == ui.item.value) {
                    isColumnPresent = true;
                }
            })
            if (isStringPresent && opsWithSquareBracket.indexOf(ui.item.value) == -1) {
                var val = ui.item.value;
                stringValue = ui.item.value + "(";
                callStringDescription(val);
                //stringValue=stringValue1.fontcolor("green");
            } else if (rootColumn.indexOf(ui.item.value) != -1) {
                var val = ui.item.value;
                stringValue = ui.item.value + "";
                callStringDescription(val);
                //stringValue=stringValue1.fontcolor("green");
            } else if (isColumnPresent) {
                var val = ui.item.value;
                stringValue = ui.item.value;
                // stringValue=val.fontcolor("green");
            } else if (opsWithSquareBracket.indexOf(ui.item.value) != -1) {
                var val = ui.item.value;
                stringValue = ui.item.value + "[";
                // stringValue=val.fontcolor("green");
            }
            var input = document.getElementById("validationDescriptionTextArea");
            var inputContent = input.value;
            var focus = getInputSelection(input);
            var ch = "";
            var flag = false;
            var wordLength = inputExp().length;
            var inputLength = input.value.length;
            if (focus.start != input.value.length) {
                if (wordLength == 0) {
                    ch = inputContent.substr(0, focus.start) + stringValue + inputContent.substr(focus.start, inputContent.length);

                    $("#ui-id-1").removeClass("vDropDownIE");
                    $(".expression-auto").removeClass("vDropDownIE");
                } else {
                    $("#ui-id-1").addClass("vDropDownIE");
                    $(".expression-auto").addClass("vDropDownIE");
                    for (var i = 0; i < inputLength; i++) {
                        if (i == focus.start - wordLength) {
                            ch = ch + stringValue;
                            flag = true;
                        } else {
                            if (flag == true) {
                                ch = ch + inputContent[i - 1 + wordLength];
                                i = i + wordLength;
                                if (i != inputLength) {
                                    ch = ch + inputContent[i];
                                }
                                flag = false;
                            } else {
                                ch = ch + inputContent[i];
                            }
                        }
                    }
                }
                var cursor = getPosSelection(input).start;
                document.getElementById("validationDescriptionTextArea").value = ch;
                if (isStringPresent) { //for functions
                    for (var i = cursor; i < input.value.length; i++) {
                        if ("([".indexOf(input.value[i]) != -1) {
                            input.focus();
                            input.setSelectionRange(i + 1, i + 1)
                            break;
                        }
                    }
                } else if (rootColumn.indexOf(stringValue) != -1) { //for functions
                    for (var i = cursor; i < input.value.length; i++) {
                        if ('")}'.indexOf(input.value[i]) != -1) {
                            input.focus();
                            input.setSelectionRange(i, i)
                            break;
                        }
                    }
                } else if (isColumnPresent) { //for functions
                    for (var i = cursor; i < input.value.length; i++) {
                        if (',.=)}'.indexOf(input.value[i]) != -1) {
                            input.focus();
                            input.setSelectionRange(i, i)
                            break;
                        }
                    }
                }
            } else {
                for (var i = 0; i < inputLength; i++) {
                    if (i == focus.start - wordLength) {
                        ch = ch + stringValue;
                        i = i + wordLength - 1;
                    } else {
                        ch = ch + inputContent[i];
                    }
                }
                var cursor = getPosSelection(input).start;
                $($('#validationDescriptionTextArea').val(ch))
                for (var i = cursor; i < input.value.length; i++) {
                    if (input.value[i] == ")") {
                        input.focus();
                        input.setSelectionRange(i, i)
                        break;
                    }
                }
            }

            $("#detailDivId").css("display", "none");
            $("#ui-id-1").removeClass("vDropDownIE");
            $(".expression-auto").removeClass("vDropDownIE");
            //$("#suggestiondivID").css("display","block").css("top", cursorPosY-25).css("left", cursorPosX);
            return false;
        },
        open: function(event, ui) {
            autocomplete = $(".ui-autocomplete");
            var el = document.getElementById("validationDescriptionTextArea");
            if ($("#suggestiondivID").css("display") == "none") {
                autocomplete.css("top", cursorPosY + 10).css("left", cursorPosX + 10);
                //$("#detailDivId").css("display","block").css("top", cursorPosY+10).css("left", cursorPosX+$('.ui-autocomplete').width()+20);
            } else {
                autocomplete.css("top", cursorPosY + 40).css("left", cursorPosX);
                //$("#detailDivId").css("display","block").css("top", cursorPosY+41).css("left", cursorPosX+$('.ui-autocomplete').width()+15);
            }
        },
        icons: {
            submenu: "ui-icon-circle-triangle-e"
        }
    }).autocomplete("widget").addClass("expression-auto");
}

function getInputSelection(el) {
    var start = 0,
        end = 0;
    if (typeof el.selectionStart == "number" && typeof el.selectionEnd == "number") {
        start = el.selectionStart;
        end = el.selectionEnd;
    }
    return {
        start: start,
        end: end
    };
}

function getCaretPosition(textArea) {
    var start = getPosSelection(textArea).start;
    var end = getPosSelection(textArea).end;
    var copy = createCopy(textArea);
    var range = document.createRange();
    range.setStart(copy.firstChild, start);
    range.setEnd(copy.firstChild, end);
    var selection = document.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);
    var rect = range.getBoundingClientRect();
    var a = copy.offsetTop;
    var b = copy.offsetLeft;
    document.body.removeChild(copy);
    textArea.selectionStart = start;
    textArea.selectionEnd = end;
    textArea.focus();
    return {
        x: b + rect.left,
        y: a + rect.top - textArea.scrollTop
    };
}

function createCopy(textArea) {
    var copy = document.createElement('div');
    copy.textContent = textArea.value;
    var style = getComputedStyle(textArea);
    [
        'fontFamily',
        'fontSize',
        'fontWeight',
        'wordWrap',
        'whiteSpace',
        'borderLeftWidth',
        'borderTopWidth',
        'borderRightWidth',
        'borderBottomWidth',
    ].forEach(function(key) {
        copy.style[key] = style[key];
    });
    copy.style.overflow = 'auto';
    copy.style.width = $('#validationDescriptionTextArea').width() + 'px';
    copy.style.height = $('#validationDescriptionTextArea').height() + 'px';
    copy.style.position = 'absolute';
    copy.style.left = $('#validationDescriptionTextArea').offset().left + 'px';
    copy.style.top = $('#validationDescriptionTextArea').offset().top + 'px';
    document.body.appendChild(copy);
    return copy;
}

function callStringDescription(val) {
    if (val == "" || val == " ") {
        $("#suggestiondivID").css("display", "none");
    } else {
        val = val.replace(/\(|\)/g, "").toUpperCase();
        var funcAndOperatorObj = [];
        if (val == "IF" || val == "THEN" || val == "ELSE") {
            for (var i = 0; i < functionsAndOperatorArray.length; i++) {
                if (functionsAndOperatorArray[i]["name"] == "IF()THEN()ELSE()" && functionsAndOperatorArray[i]["category"] == "Functions") {
                    funcAndOperatorObj.push(functionsAndOperatorArray[i]);
                    break;
                }
            }
        } else {
            funcAndOperatorObj = jsonPath(functionsAndOperatorArray, "$.[?(@.name=='" + val + "' && @.include=='Y')]");
        }

        if (funcAndOperatorObj != false) {
            $("#suggestiondivID").empty();
            $("#suggestiondivID").append("<p>" + funcAndOperatorObj[0].expressionFormatAuto + "</p>");
            $("#suggestiondivID").css("display", "block").css("top", cursorPosY - 25).css("left", cursorPosX);
            getParameterCount(val, commasCount, funcAndOperatorObj);
        } else {
            $("#suggestiondivID").css("display", "none");
        }
    }
}

function checkElementForSuggestion(stringValue) {
    if (stringArray.indexOf(stringValue.toUpperCase()) != -1) {
        $("#suggestiondivID").css("display", "block");
    }
}

function getInputForSuggestion() {
    var input = document.getElementById("validationDescriptionTextArea");
    var inputContent = input.value.length;
    var inputText = document.getElementById("validationDescriptionTextArea").value;
    input.focus();
    var result = getInputSelection(input);
    var i = result.start - 1;
    var ch = "";
    var spclChar = "[(+-*/ =><!\n,"
    if (inputText[i] == " ") {
        return " ";
    }
    i = result.start - 1;
    var openBracket = 0;
    var closeBracket = 0;
    var openSquareBracket = 0;
    var closeSquareBracket = 0;
    commasCount = 0;
    var textInsideBracket = 0;
    while (i >= 0) {
        if (inputText[i] == "(") {
            openBracket++;
        }
        if (inputText[i] == ")") {
            closeBracket++;
        }
        if (inputText[i] == ",") {
            commasCount++;
        }
        if (inputText[i] == "[") {
            commasCount = 0;
            //openSquareBracket++;
        }
        if (inputText[i] == "]") {
            //closeSquareBracket++;
            closeSquareBracket = closeSquareBracket + commasCount;
        }
        if (closeBracket < openBracket) {
            break;
        }
        i--;
    }
    commasCount = commasCount + closeSquareBracket;
    commasCount == undefined ? 0 : commasCount;
    i--;
    while (spclChar.indexOf(inputText[i]) == -1 && i >= 0) {
        ch = inputText[i] + ch;
        i--;
    }
    /*var regex = /(?![^)(]*\([^)(]*?\)\)),(?![^\[]*\])/gm;
    var regexForBracket = /]/gi, bracketResult, brackeIndices = [];
    var brackeIndices = [];
    var endIndex = 0;
    while ( (bracketResult = regex.exec(inputText)) ) {
                    brackeIndices.push(bracketResult.index);
    }
    for(var i=0;i<brackeIndices.length;i++){
                    if(brackeIndices[i]>=result.end){
                                    endIndex = brackeIndices[i];
                                    break;
                    }else{
                                    endIndex = result.end;
                    }
    }

    var str = inputText.substr(inputText.indexOf(ch), endIndex);
    var textAreaSubstr = str.match(regex);
    if(textAreaSubstr){
                    commasCount=textAreaSubstr.length;
    }else{
                    commasCount=0;
    }*/
    return ch;
}

function getColumnDetailsForAutoSuggestion(e) {
    //ie keycode
    var vKeyCode = ((event.keyCode) ? event.keyCode : event.which);
    var $txt = $(e);
    var caretPos = getPosSelection($txt[0]).start;
    var textAreaTxt = inputExp("column");
    var elementArray = textAreaTxt.split('.');
    var root = "";
    var column = "";
    var rtnType = "GRID";
    if (vKeyCode == 190) {
        event.preventDefault();
        minWordLength = 0;
        $("#detailDivId").css("display", "none");
        var input = document.getElementById("validationDescriptionTextArea");
        var inputText = document.getElementById("validationDescriptionTextArea").value;
        input.focus();
        var result = getInputSelection(input);
        document.getElementById("validationDescriptionTextArea").value = inputText.substr(0, result.start) + '""' + inputText.substr(result.start, inputText.length);
        input.setSelectionRange(result.start + 1, result.start + 1);
        if (elementArray[0].toUpperCase() == "RTN" || elementArray[0].toUpperCase() == "REFTBL" || elementArray[0].toUpperCase() == "ENT") { //dd changes
            root = elementArray[0];
            for (var i = 0; i < elementArray.length; i++) {
                if (elementArray[i] == "") {
                    column = elementArray[i - 1];
                    level = "level-".concat(i);
                }
            }
            if (elementArray[0].toUpperCase() == "RTN") {
                //console.log("column",column);
                
				//createListOfElementsForSuggestion((column != undefined && column.indexOf('"') > -1) ? column.replace(/"/g, '') : column, level, rtnType);
            }
            if (elementArray[0].toUpperCase() == "REFTBL") {
                //console.log("column",column);
                //createListOfElementsForReftblForSuggestion((column != undefined && column.indexOf('"') > -1) ? column.replace(/"/g, '') : column, level);
            }
            if (elementArray[0].toUpperCase() == "ENT") { //dd changes
                //console.log("column",column);
                createListOfElementsForEntityForSuggestion((column != undefined && column.indexOf('"') > -1) ? column.replace(/"/g, '') : column, level);
            }
            if (elementArray.length == 1) {
                $("#detailDivId").css("display", "none");
            }
            /*else{
                                                                            $("#detailDivId").css("display","block").css("top", cursorPosY+10).css("left", cursorPosX+$('.ui-autocomplete').width()+20);
                                                            }*/
        } else if (inputExp("column").split(".")[0].toUpperCase() == "ME") {
            if (level != "level-3") {
                availableTags = [];
                columnTag = [];
                var effectiveDate = $("#date-picker-id").data('datepicker').getFormattedDate('dd-mm-yyyy');
                getLineItemDetailsForSuggestion(effectiveDate, rtnReturns, rtnSection, "GRID", "undefined", "undefined");
            }
        }
    } else if (vKeyCode == 8 || vKeyCode == 37 || vKeyCode == 38 || vKeyCode == 39 || vKeyCode == 40 || vKeyCode == "click") {
        if (elementArray[0].toUpperCase() == "RTN" || elementArray[0].toUpperCase() == "REFTBL" || elementArray[0].toUpperCase() == "ENT") { //dd changes
            if (elementArray.length == 1) {
                $("#detailDivId").css("display", "none");
            }
            /*else{
                                                                            $("#detailDivId").css("display","block").css("top", cursorPosY+10).css("left", cursorPosX+$('.ui-autocomplete').width()+20);
                                                            }*/
            root = elementArray[0];
            //level="level-".concat(elementArray.length-1);
            var levelInd = "level-".concat(elementArray.length - 1);
            column = elementArray[elementArray.length - 2];
            if (levelInd != level || (levelInd == "level-3" && columnTag.length == 0)) {
                if (elementArray[0].toUpperCase() == "RTN") {
                    level = levelInd;
                    //console.log("column",column);
                    //createListOfElementsForSuggestion((column != undefined && column.indexOf('"') > -1) ? column.replace(/"/g, '') : column, levelInd, rtnType);
                } else if (elementArray[0].toUpperCase() == "REFTBL") {
                    //console.log("column",column);
                    level = levelInd;
                    //createListOfElementsForReftblForSuggestion((column != undefined && column.indexOf('"') > -1) ? column.replace(/"/g, '') : column, levelInd);
                } else if (elementArray[0].toUpperCase() == "ENT") { //dd changes
                    //console.log("column",column);
                    level = levelInd;
                    createListOfElementsForEntityForSuggestion((column != undefined && column.indexOf('"') > -1) ? column.replace(/"/g, '') : column, levelInd);
                }
            }
        } else if (inputExp("column").split(".")[0].toUpperCase() == "ME") {
            if (level != "level-3") {
                availableTags = [];
                columnTag = [];
                var effectiveDate = $("#date-picker-id").data('datepicker').getFormattedDate('dd-mm-yyyy');
                getLineItemDetailsForSuggestion(effectiveDate, rtnReturns, rtnSection, "GRID", "undefined", "undefined");
                level = "level-3";
            }
        } else if (elementArray[0].trim() == "") {
            $("#detailDivId").css("display", "none");
            $("#ui-id-1").removeClass("vDropDownIE");
            $(".expression-auto").removeClass("vDropDownIE");
        }
    }
}

function createListOfElementsForSuggestion(name, ind, returnTye) {
    columnTag = [];
    ind = ind == undefined ? "" : ind;
    var effectiveDate = $("#date-picker-id").data('datepicker').getFormattedDate('dd-mm-yyyy');
    if (ind.toLowerCase() == "level-1") {
        getReturnDetailsForSuggestion(effectiveDate);
    } else if (ind.toLowerCase() == "level-2" && returnTye.toLowerCase() == "grid") {
        expressionObj = {};
        expressionObj["returnName"] = name;
        getSectionDetailsForSuggestion(effectiveDate, expressionObj.returnName);
    } else if (ind.toLowerCase() == "level-3" && returnTye.toLowerCase() == "grid") {
        expressionObj["sectionName"] = name;
        getLineItemDetailsForSuggestion(effectiveDate, expressionObj.returnName, expressionObj.sectionName, returnTye, "undefined", "undefined");
    }
}

function createListOfElementsForReftblForSuggestion(column, ind) {
    columnTag = [];
    ind = ind == undefined ? "" : ind;
    if (ind.toLowerCase() == "level-1") {
        getEntityViewsForAutoSuggestion();
    } else if (ind.toLowerCase() == "level-2") {
        var reftblObj = jsonPath(returns, "$.[?(@.entityViewName=='" + column + "')]")[0];
        getEntityColumnNameForSuggestion(column, reftblObj.entityUuid, reftblObj.entityViewUuid, reftblObj.entityViewVersion);
    }
}

function getReturnDetailsForSuggestion(effectiveDate) {
    $.ajax({
        url: 'getreturns.htm',
        type: 'POST',
        dataType: 'json',
        async: false,
        data: {
            effectiveDate: effectiveDate,
            isExpr: 'Y'
        },
        success: function(response) {
            returns = response.response;
            returns.forEach(function(val) {
                var sourceObj = {};
                sourceObj["label"] = val.returns;
                sourceObj["logo"] = "./images/helpImgStart.png"
                columnTag.push(sourceObj);
            });
            availableTags = columnTag;
        }
    }).done(function() {});
}

function getSectionDetailsForSuggestion(effectiveDate, returnName) {
    $.ajax({
        url: 'getsections.htm',
        type: 'POST',
        dataType: 'json',
        async: false,
        data: {
            effectiveDate: effectiveDate,
            returns: returnName,
            isExpr: 'Y'
        },
        success: function(response) {
            //$('#expression-data .main-parent').remove();
            sections = response.response;
            sections.forEach(function(val) {
                var sourceObj = {};
                sourceObj["label"] = val.section;
                sourceObj["logo"] = "./images/download.png"
                columnTag.push(sourceObj);
            });
            availableTags = columnTag;
        }
    }).done(function() {});
}

function getLineItemDetailsForSuggestion(effectiveDate, returnName, section, sectionType, entityName, entityVersion) {
    $.ajax({
        url: 'getlineitems.htm',
        type: 'POST',
        dataType: 'json',
        async: false,
        data: {
            effectiveDate: effectiveDate,
            returns: returnName,
            sections: section,
            sectionType: sectionType,
            entityName: entityName,
            entityVersion: entityVersion
        },
        success: function(response) {
            lineItems = response.response;
            lineItems.forEach(function(val) {
                var sourceObj = {};
                sourceObj["label"] = val.name;
                sourceObj["logo"] = "./images/DownloadNew.png"
                columnTag.push(sourceObj);
            });
            availableTags = columnTag;
        }
    }).done(function() {});
}

function highLightParameter(element, start, end) {
    if (element.length > 0) {
        var item = $(element);
        var str = item.data("origHTML");
        if (!str) {
            str = item.html();
            item.data("origHTML", str);
        }
        str = str.substr(0, start) +
            '<span class="hilite">' +
            str.substr(start, end - start + 1) +
            '</span>' +
            str.substr(end + 1);
        item.html(str);
    }
}

function getParameterCount(element, noOfCommas, funcAndOperatorObj) {
    //var funcAndOperatorObj = jsonPath(functionsAndOperatorArray, "$.[?(@.name=='" + elementLen.toUpperCase() + "' && @.category=='Functions')]");
    if (funcAndOperatorObj != false) {
        var suggestionElemParam = $('#suggestiondivID p').text();
        if (element == "IF" || element == "THEN" || element == "ELSE") {
            var startIndex = suggestionElemParam.indexOf(element) + element.length + 1;
            var endIndex = startIndex + (suggestionElemParam.indexOf(")") - suggestionElemParam.indexOf("(") - 2);
            highLightParameter($('#suggestiondivID p'), startIndex, endIndex);
        } else {
            var regex = /,/gi,
                result, indices = [];
            var indices = [];
            while ((result = regex.exec(suggestionElemParam))) {
                indices.push(result.index);
            }
            if (noOfCommas > indices.length) {
                $('#suggestiondivID p').removeClass('hilite');
            } else if (noOfCommas == 0 || indices.length == 0) {
                var startIndex = element.length + 1;
                var endIndex = indices[noOfCommas] == undefined ? suggestionElemParam.length - 2 : indices[noOfCommas] - 1;
                highLightParameter($('#suggestiondivID p'), startIndex, endIndex);
            } else {
                var startIndex = indices[noOfCommas - 1] + 1;
                var endIndex = indices[noOfCommas] == undefined ? suggestionElemParam.length - 2 : indices[noOfCommas];
                highLightParameter($('#suggestiondivID p'), startIndex, endIndex);
            }
        }
    } else {
        $("#suggestiondivID").css("display", "none");
    }
}

function getAutoSuggestHelpText(val, topOffset, leftOffset) {
    var funcAndOperatorObj = [];
    $('#line-item-detail').css('display', 'none');
    if (val == "IF()THEN()ELSE()") {
        for (var i = 0; i < functionsAndOperatorArray.length; i++) {
            if (functionsAndOperatorArray[i]["name"] == "IF()THEN()ELSE()") {
                funcAndOperatorObj.push(functionsAndOperatorArray[i]);
                break;
            }
        }
    } else {
        funcAndOperatorObj = jsonPath(functionsAndOperatorArray, "$.[?(@.name=='" + val + "')]");
    }


    var returnObj = typeof returns === 'undefined' ? false : jsonPath(returns, "$.[?(@.returns=='" + val + "')]");
    var sectionsObj = typeof sections === 'undefined' ? false : jsonPath(sections, "$.[?(@.section=='" + val + "')]");
    var lineItemsObj = typeof lineItems === 'undefined' ? false : jsonPath(lineItems, "$.[?(@.name=='" + val + "')]");
    if (funcAndOperatorObj != false) {
        $('#detailDiv').html('<small class="vs-baseline-regular-black">Category : <span class="vs-baseline-medium-primary">' + funcAndOperatorObj[0].category + '</span><br></small>');
        $('#detailExample').html('<small class="vs-baseline-regular-black">Format : <span class="vs-baseline-medium-primary function-format"></span><br></small>');
        $('#detailExample .function-format').text(funcAndOperatorObj[0].expressionFormat);
        $("#detailDivId").css("display", "block").css("top", topOffset).css("left", leftOffset);
    } else if (returnObj != false) {
        $('#detailDiv').html('<small class="vs-baseline-regular-black">Return Name : <span class="vs-baseline-medium-primary">' + returnObj[0].returnName + '</span><br></small>');
        $('#detailExample').html('<small class="vs-baseline-regular-black">Return Type : <span class="vs-baseline-medium-primary">' + returnObj[0].returnType + '</span><br></small>');
        $("#detailDivId").css("display", "block").css("top", topOffset).css("left", leftOffset);
    } else if (sectionsObj != false) {
        $('#detailDiv').html('<small class="vs-baseline-regular-black">Section Name : <span class="vs-baseline-medium-primary">' + sectionsObj[0].sectionName + '</span><br></small>');
        $('#detailExample').html('<small class="vs-baseline-regular-black">Form Name : <span class="vs-baseline-medium-primary">' + sectionsObj[0].formName + '</span><br></small>');
        $("#detailDivId").css("display", "block").css("top", topOffset).css("left", leftOffset);
    } else if (lineItemsObj != false) {
        $('#detailDiv').html('<small class="vs-baseline-regular-black">Column Name : <span class="vs-baseline-medium-primary">' + lineItemsObj[0].columnName + '</span><br></small>');
        $('#detailExample').html('<small class="vs-baseline-regular-black">Data Type : <span class="vs-baseline-medium-primary">' + lineItemsObj[0].DataType + '</span><br></small>');
        $('#line-item-detail').html('<small class="vs-baseline-regular-black">Attribute Type : <span class="vs-baseline-medium-primary">' + lineItemsObj[0].AttributeType + '</span><br></small>').css('display', 'block');
        $("#detailDivId").css("display", "block").css("top", topOffset).css("left", leftOffset);
    } else {
        $('#detailDivId').css("display", "none");
    }
}

function getEntityViewsForAutoSuggestion() {
    $.ajax({
        url: 'getentityviews.htm',
        type: 'POST',
        dataType: 'json',
        async: false,
        data: {},
        success: function(response) {
            returns = response.success;
            returns.forEach(function(val) {
                var sourceObj = {};
                sourceObj["label"] = val.entityViewName;
                sourceObj["logo"] = "./images/deleteImage.png"
                columnTag.push(sourceObj);
            });
            availableTags = columnTag;
        }
    }).done(function() {});
}

function getEntityColumnNameForSuggestion(entityViews, entityUuid, entityViewUuid, entityViewVersion) {
    $.ajax({
        url: 'getentitycolumdetails.htm',
        type: 'POST',
        dataType: 'json',
        async: false,
        data: {
            entityViews: entityViews,
            entityUuid: entityUuid,
            entityViewUuid: entityViewUuid,
            entityViewVersion: entityViewVersion
        },
        success: function(response) {
            var columnName = response.success;
            var fragment = document.createDocumentFragment();
            columnName.forEach(function(val) {
                var sourceObj = {};
                sourceObj["label"] = val.entityName;
                sourceObj["logo"] = "./images/info.png"
                columnTag.push(sourceObj);
            });
            availableTags = columnTag;
        }
    }).done(function() {

    });
}
$.ui.autocomplete.filter = function(array, term) {
    var matcher = new RegExp('(^| )' + $.ui.autocomplete.escapeRegex(term), 'i');
    return $.grep(array, function(value) {
        return matcher.test(value.label) || matcher.test(value.value) || matcher.test(value);
    });
};

// ------------------dd changes-----------------------

function createListOfElementsForEntityForSuggestion(column, ind) {
    columnTag = [];
    ind = ind == undefined ? "" : ind;
    if (ind.toLowerCase() == "level-1") {
        getEntitySubjectAreaForAutoSuggestion();
    } else if (ind.toLowerCase() == "level-2") {
        var ddExpressionObj = jsonPath(ddEntity["subjectArea"], "$.[?(@.subjectAreaName=='" + column + "')]")[0];
        getEntityTableNameForAutoSuggestion(ddExpressionObj.subjectAreaUuid);
    } else if (ind.toLowerCase() == "level-3") {
        var ddExpressionObj = jsonPath(ddEntity["entityName"], "$.[?(@.entityName=='" + column + "')]")[0];
        getEntityTableColumnNameForAutoSuggestion(ddExpressionObj.entityUuid);
    }
}

function getEntitySubjectAreaForAutoSuggestion() {
    $.ajax({
        url: 'getsubjectAreaForDQ.htm',
        type: 'GET',
        dataType: 'json',
        async: false,
        data: {},
        complete: function(response) {
			var respJSON = JSON.parse(response.responseJSON.response);
            ddEntity["subjectArea"] = respJSON.model.subjectAreas;
            response = respJSON.model.subjectAreas;
            for (var i = 0; i < response.length; i++) {
                var sourceObj = {};
                sourceObj["label"] = response[i].subjectAreaName;
                sourceObj["logo"] = "./images/download.png"
                columnTag.push(sourceObj);
            }
            availableTags = columnTag;
        }
    }).done(function() {});
}

function getEntityTableNameForAutoSuggestion(subjectAreaUuid) {
    $.ajax({
        url: 'getentitytablenameforautosuggestion.htm',
        type: 'GET',
        dataType: 'json',
        async: false,
        data: {
            subjectAreaUuid: subjectAreaUuid
        },
        success: function(response) {
            ddEntity["entityName"] = response.success.model;
            response = response.success.model;
            for (var i = 0; i < response.length; i++) {
                var sourceObj = {};
                sourceObj["label"] = response[i].entityName;
                sourceObj["logo"] = "./images/download.png"
                columnTag.push(sourceObj);
            }
            availableTags = columnTag;
        }
    }).done(function() {});
}

function getEntityTableColumnNameForAutoSuggestion(entityUuid) {
    $.ajax({
        url: 'getEntityColumnByUUIDForDQ.htm',
        type: 'POST',
        dataType: 'json',
        async: false,
        data: {
            entityUuid: entityUuid
        },
        success: function(response) {
            ddEntity["entityColumnName"] = response.response;
            response = response.response;
            for (var i = 0; i < response.length; i++) {
                var sourceObj = {};
                sourceObj["label"] = response[i];
                sourceObj["logo"] = "./images/download.png"
                columnTag.push(sourceObj);
            }
            availableTags = columnTag;
        }
    }).done(function() {});
}

//------------------dd changes-----------------------


function getPosSelection(el) {
    var start = 0,
        end = 0;

    if (typeof el.selectionStart == "number" && typeof el.selectionEnd == "number") {
        start = el.selectionStart;
        end = el.selectionEnd;
    }

    return {
        start: start,
        end: end
    };
}



function handleKeyboardNavForDropDownBck(e) {
    console.log($(".focusClass").text());
    var vKeyCode = e.keyCode ? e.keyCode : e.which;
    var next;
    var li = $("#ui-id-1").find("li")[0];
    var liSelected;
    if (vKeyCode === 40) {
        if ($(".vDropDownIE").is(":visible") == true) {
            liSelected = (lastSelectedElm && lastSelectedElm != "" && lastSelectedElm.text() != "") ? $(lastSelectedElm) : $($('.focusClass')[0]);
            console.log(liSelected.text());
            clearAllGlobalParams();
            if (liSelected) {
                $(".focusClass").removeClass('focusClass');
                next = liSelected.parent().next();
                if (next) {
                    lastSelectedElm = $(next).find("a");
                    intervalForSelection = setInterval(function() {
                        $(next).find("a").addClass('focusClass').addClass("ui-state-focus").focus();
                    }, 20);
                    console.log($(next).find("a").text());

                } else {
                    lastSelectedElm = $(li).find("a");
                    intervalForSelection = setInterval(function() {
                        $(li).find("a").addClass('focusClass').addClass("ui-state-focus").focus();
                    }, 20);
                    // $(li).find("a").addClass('focusClass');

                }
            } else {
                lastSelectedElm = $(li).find("a");
                intervalForSelection = setInterval(function() {
                    $(li).find("a").addClass('focusClass').addClass("ui-state-focus").focus();
                }, 20);
            }
        }
    } else if (vKeyCode === 38) {
        if ($(".vDropDownIE").is(":visible") == true) {
            liSelected = $($('.focusClass')[0]);
            if (liSelected) {
                liSelected.removeClass('focusClass');
                next = liSelected.previous();
                if (next) {
                    next.addClass('focusClass');
                } else {
                    li.eq(0).addClass('focusClass');
                }
            } else {
                li.eq(0).addClass('focusClass');
            }
        }
    }
}




/* function handleSelectionOfValueFromKeyboard(e){
	
	$($(".focusClass")[0]).focus().click();
	clearAllGlobalParams();
	
} */


function clearAllGlobalParams() {
    //clearing all global value for selection.
    lastSelectedElm = "";
    clearInterval(intervalForSelection);
    $(".focusClass").blur();
    $(".focusClass").removeClass("focusClass");
    $(".ui-state-focus").removeClass("ui-state-focus");

}

function handleSelectionOfValueFromKeyboard() {
    console.log($(".focusClass").length);
    clearAllGlobalParams();
    if ($(".focusClass").length <= 1) {
        $($($("#ui-id-1").find("li")[0]).find("a")).addClass('focusClass').addClass("ui-state-focus").focus();
        availableTags = [];
        //$('#validationDescriptionTextArea').focus()
    }

}


function msieversion() {

    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) // If Internet Explorer, return version number
    {
        return true;
    } else // If another browser, return 0
    {
        return false;
    }

    return false;
}