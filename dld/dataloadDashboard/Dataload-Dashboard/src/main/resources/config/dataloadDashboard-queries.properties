
dld.loginUserQuery=select username,password,client_code from dld_users where upper(rtrim(ltrim(username)))=?
dld.applicableFrequencies=select fd.FREQUENCY_ID,fd.SOLUTION_ID,fm.FREQUENCY_Name from FREQUENCY_DETAIL fd inner join FREQUENCY_MASTER fm on fd.FREQUENCY_ID = fm.FREQUENCY_ID and fd.SOLUTION_ID = fm.SOLUTION_ID where PERIOD_date=?
dld.completedTaskQuery=select count(*) from dl_task_execution_log d1 inner join (select max(sequence_number) as max_sequence_number,task_name,TASK_REPOSITORY,client_code,BUSINESS_PERIOD_DATE from dl_task_execution_log where client_code=? and business_period_date=? group by task_name,TASK_REPOSITORY,client_code,BUSINESS_PERIOD_DATE ) d2 on UPPER(d1.task_name) = UPPER(d2.task_name) AND UPPER(D1.TASK_REPOSITORY) = UPPER(D2.TASK_REPOSITORY) and d1.sequence_number = d2.max_sequence_number and d1.CLIENT_CODE=d2.client_code AND D1.BUSINESS_PERIOD_DATE=D2.BUSINESS_PERIOD_DATE  INNER JOIN (SELECT DTM.TASK_NAME,DTM.TASK_REPOSITORY,DTM.CLIENT_CODE FROM DL_TASK_MASTER DTM INNER JOIN DL_TASK_FREQUENCY DLF ON UPPER(DLF.TASK_NAME) = UPPER(DTM.TASK_NAME) AND DLF.CLIENT_CODE = DTM.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DTM.TASK_REPOSITORY) AND DLF.VERSION_NO=DTM.VERSION_NO WHERE DTM.CLIENT_CODE = ? AND DLF.IS_EXCLUSION_INDICATOR='N' AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE AND DTM.IS_ACTIVE = 'Y' AND UPPER(DLF.FREQUENCY) in (
dld.allTaskByCBD=SELECT d1.* FROM dl_task_execution_log d1 INNER JOIN(SELECT MAX(sequence_number) AS max_sequence_number,task_name,TASK_REPOSITORY,client_code,BUSINESS_PERIOD_DATE FROM dl_task_execution_log where business_period_date=? and upper(TASK_STATUS) like ? and client_code =? GROUP BY task_name,client_code,TASK_REPOSITORY,BUSINESS_PERIOD_DATE) d2 ON UPPER(d1.task_name) = UPPER(d2.task_name) AND UPPER(D1.TASK_REPOSITORY) = UPPER(D2.TASK_REPOSITORY) AND d1.sequence_number = d2.max_sequence_number and d1.CLIENT_CODE=d2.client_code AND D1.BUSINESS_PERIOD_DATE=D2.BUSINESS_PERIOD_DATE INNER JOIN (SELECT DTM.TASK_NAME,DTM.TASK_REPOSITORY,DTM.CLIENT_CODE FROM DL_TASK_MASTER DTM INNER JOIN DL_TASK_FREQUENCY DLF ON UPPER(DLF.TASK_NAME) = UPPER(DTM.TASK_NAME) AND DLF.CLIENT_CODE = DTM.CLIENT_CODE AND DLF.VERSION_NO=DTM.VERSION_NO AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DTM.TASK_REPOSITORY) WHERE DTM.CLIENT_CODE = ? AND DLF.IS_EXCLUSION_INDICATOR='N'  AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE AND DTM.IS_ACTIVE = 'Y' AND UPPER(DLF.FREQUENCY) in (
dld.taskQuery=select TF.* from  dl_task_frequency tf INNER JOIN DL_TASK_MASTER DTM ON tf.VERSION_NO             = DTM.VERSION_NO AND TF.CLIENT_CODE           =DTM.CLIENT_CODE AND UPPER(TF.TASK_NAME)             = UPPER(DTM.TASK_NAME) AND TF.CLIENT_CODE             = DTM.CLIENT_CODE INNER JOIN DL_TASK_TYPE DTT ON UPPER(DTT.TASK_TYPE) = UPPER(DTM.TASK_TYPE) AND DTT.CLIENT_CODE=DTM.CLIENT_CODE where tf.client_code=? AND DTT.IS_EXECUTABLE_TASK = 'Y' AND TF.IS_EXCLUSION_INDICATOR='N' AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE AND DTM.IS_ACTIVE = 'Y' and UPPER(tf.frequency) in (
dld.getMaxSeqNo=select max(SEQUENCE_NUMBER) from DL_TASK_EXECUTION_LOG
dld.insertTaskStatics=insert into DL_TASK_EXECUTION_LOG (SEQUENCE_NUMBER,CLIENT_CODE,TASK_REPOSITORY,TASK_NAME,FLOW_TYPE,FLOW_SEQUENCE_NO,TECHNICAL_TASK_NAME,TECHNICAL_SUB_TASK_NAME,TASK_STATUS,RUN_PERIOD_DATE,BUSINESS_PERIOD_DATE,RUN_DETAILS,START_DATE_TIME,END_DATE_TIME,SOURCE_COUNT,TARGET_COUNT,TARGET_INSERTED_COUNT,TARGET_UPDATED_COUNT,TARGET_REJECTED_RECORD) values ((SELECT ((COALESCE(max(SEQUENCE_NUMBER),0))+1) FROM DL_TASK_EXECUTION_LOG),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
dld.getSolutionName=SELECT * FROM VYASASOlUTION WHERE ISACTIVE=1 and client_code=?
dld.dsName=SELECT * FROM DIM_DATA_SOURCE WHERE CLIENT_CODE=?
dld.getMaxBusinessDate=select max(business_period_date) from dl_task_execution_log where client_code=?
dld.getPreviousBusinessDate=select max(business_period_date) from dl_task_execution_log where business_period_date < ? and client_code=?
dld.getPreviousPendingDate=SELECT MAX(d1.business_period_date) FROM dl_task_execution_log d1 INNER JOIN(SELECT MAX(sequence_number) AS max_sequence_number,task_name,TASK_REPOSITORY,client_code,BUSINESS_PERIOD_DATE FROM dl_task_execution_log where business_period_date<? and upper(TASK_STATUS) <>'COMPLETED' and client_code =? GROUP BY task_name,client_code,TASK_REPOSITORY,BUSINESS_PERIOD_DATE) d2 ON UPPER(d1.task_name) = UPPER(d2.task_name) AND UPPER(D1.TASK_REPOSITORY) = UPPER(D2.TASK_REPOSITORY) AND d1.sequence_number = d2.max_sequence_number and d1.CLIENT_CODE=d2.client_code AND D1.BUSINESS_PERIOD_DATE=D2.BUSINESS_PERIOD_DATE
dld.getDistinctFlowType=SELECT DISTINCT(FLOW_TYPE) FROM DL_TASK_FLOW_TYPE WHERE ((client_code=?) and UPPER(TASK_NAME) IN 
dld.getTaskListFromFlowType=SELECT * FROM DL_TASK_FLOW_TYPE WHERE client_code=? and UPPER(FLOW_TYPE) IN
dld.getStagingDetailsQuerry=SELECT DLF.TASK_NAME,  DLF.CLIENT_CODE,  DLF.TASK_REPOSITORY,  DLF.FREQUENCY,  DLF.OFFSET,  DLF.IS_EXCLUSION_INDICATOR,  DLEO.OWNER_NAME,DLEO.SOLUTION_ID,  DLST.ENTITY_NAME,  DLTEL.TASK_STATUS,  DLST.LINK_TYPE,  DLFT.FLOW_TYPE FROM DL_TASK_MASTER DTM INNER JOIN DL_TASK_TYPE DTT ON UPPER(DTT.TASK_TYPE) = UPPER(DTM.TASK_TYPE) AND DTT.CLIENT_CODE=DTM.CLIENT_CODE INNER JOIN DL_TASK_FREQUENCY DLF ON UPPER(DLF.TASK_NAME) = UPPER(DTM.TASK_NAME) AND DLF.VERSION_NO = DTM.VERSION_NO AND DLF.CLIENT_CODE     = DTM.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DTM.TASK_REPOSITORY) INNER JOIN DL_TASK_FLOW_TYPE DLFT ON UPPER(DLF.TASK_NAME)        = UPPER(DLFT.TASK_NAME) AND DLF.CLIENT_CODE     = DLFT.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLFT.TASK_REPOSITORY) AND DLF.VERSION_NO = DLFT.VERSION_NO  INNER JOIN DL_TASK_SOURCE_TARGET DLST ON UPPER(DLF.TASK_NAME)        = UPPER(DLST.TASK_NAME) AND DLF.CLIENT_CODE     = DLST.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLST.TASK_REPOSITORY) AND DLF.VERSION_NO = DLST.VERSION_NO INNER JOIN DL_ENTITY_OWNER DLEO ON DLST.CLIENT_CODE = DLEO.CLIENT_CODE AND UPPER(DLST.OWNER_NAME) = UPPER(DLEO.OWNER_NAME) INNER JOIN DL_ENTITY DE ON DLEO.CLIENT_CODE  = DE.CLIENT_CODE AND UPPER(DLEO.OWNER_NAME)  = UPPER(DE.OWNER_NAME) AND UPPER(DLST.ENTITY_NAME) = UPPER(DE.ENTITY_NAME) LEFT OUTER JOIN  (SELECT D1.*  FROM DL_TASK_EXECUTION_LOG D1  INNER JOIN    (SELECT MAX(SEQUENCE_NUMBER) AS MAX_SEQUENCE_NUMBER,      TASK_NAME,      CLIENT_CODE,  TASK_REPOSITORY,    BUSINESS_PERIOD_DATE    FROM DL_TASK_EXECUTION_LOG    WHERE BUSINESS_PERIOD_DATE=?    GROUP BY TASK_NAME,     TASK_REPOSITORY, CLIENT_CODE,      BUSINESS_PERIOD_DATE    ) D2  ON UPPER(D1.TASK_NAME)                  = UPPER(D2.TASK_NAME) AND UPPER(D1.TASK_REPOSITORY) = UPPER(D2.TASK_REPOSITORY)  AND D1.SEQUENCE_NUMBER           = D2.MAX_SEQUENCE_NUMBER  AND D1.CLIENT_CODE               =D2.CLIENT_CODE  AND D1.BUSINESS_PERIOD_DATE      =D2.BUSINESS_PERIOD_DATE  ) DLTEL ON UPPER(DLTEL.TASK_NAME)       = UPPER(DLF.TASK_NAME) AND DLTEL.CLIENT_CODE              = DLF.CLIENT_CODE AND UPPER(DLTEL.TASK_REPOSITORY)          = UPPER(DLF.TASK_REPOSITORY) WHERE UPPER(DLST.LINK_TYPE)               = ? AND UPPER(DLEO.EXTERNAL_SOURCE_INDICATOR) = ? AND DLEO.CLIENT_CODE               = ? AND DLF.IS_EXCLUSION_INDICATOR     ='N' AND DTM.IS_ACTIVE = 'Y' AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE AND DTT.IS_EXECUTABLE_TASK = 'Y'
dld.logAllTask=INSERT INTO DL_ALL_TASK_LOG(SEQUENCE_NUMBER,REQUEST_CONTENT,REQUEST_ORIGIN) VALUES((SELECT ((COALESCE(max(SEQUENCE_NUMBER),0))+1) FROM DL_TASK_EXECUTION_LOG),?,?)
dld.insertClient=insert into CLIENT_MASTER (CLIENT_CODE,CLIENT_DESCRIPTION) values (?,?)
dld.insertEntityOwner=insert into DL_ENTITY_OWNER (CLIENT_CODE,OWNER_NAME,OWNER_DESCRIPTION,EXTERNAL_SOURCE_INDICATOR,DATA_SOURCE_ID,SOLUTION_ID,DISPLAY_ORDER,CONTACT_DETAILS) values (?,?,?,?,?,?,?,?)
dld.insertEntityMaster=insert into DL_ENTITY (CLIENT_CODE,ENTITY_NAME,ENTITY_DESCRIPTION,ENTITY_TYPE,ENTITY_DETAIL,OWNER_NAME) values (?,?,?,?,?,?)
dld.insertFlowTypes=insert into DL_FLOW_TYPE (CLIENT_CODE,FLOW_TYPE,FLOW_DESCRIPTION) values (?,?,?)
dld.insertTaskRepository=insert into DL_TASK_REPOSITORY (CLIENT_CODE,REPOSITORY_NAME,REPOSITORY_DESCRIPTION) values (?,?,?)
dld.insertTaskSourceTarget=insert into DL_TASK_SOURCE_TARGET (CLIENT_CODE,VERSION_NO,TASK_NAME,TASK_REPOSITORY,OWNER_NAME,ENTITY_NAME,LINK_TYPE) values (?,?,?,?,?,?,?)
dld.getTaskMaster=select * from DL_TASK_MASTER where CLIENT_CODE=? and UPPER(TASK_REPOSITORY)=? and UPPER(TASK_NAME)=? and IS_ACTIVE=? and ? between EFFECTIVE_START_DATE and EFFECTIVE_END_DATE 
dld.insertTaskMaster=insert into DL_TASK_MASTER (CLIENT_CODE,TASK_DESCRIPTION,TASK_NAME,TASK_REPOSITORY,TASK_TYPE,TECHNICAL_TASK_NAME,TECHNICAL_SUB_TASK_NAME,IS_ACTIVE,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,VERSION_NO,IS_VALIDATION_REQUIRED) values (?,?,?,?,?,?,?,?,?,?,?,?)
dld.insertTaskFlowType=insert into DL_TASK_FLOW_TYPE (CLIENT_CODE,VERSION_NO,TASK_NAME,TASK_REPOSITORY,FLOW_TYPE) values (?,?,?,?,?)
dld.insertTaskFrequency=insert into DL_TASK_FREQUENCY (CLIENT_CODE,VERSION_NO,TASK_NAME,TASK_REPOSITORY,FREQUENCY,OFFSET,IS_EXCLUSION_INDICATOR) values (?,?,?,?,?,?,?)

dld.getRepData=select * from DL_TASK_REPOSITORY where CLIENT_CODE=?
dld.getFlowData=select * from DL_FLOW_TYPE where CLIENT_CODE=?
dld.getEntitymasterData=select * from DL_ENTITY where CLIENT_CODE=?
dld.getEntityOwnerData=select * from DL_ENTITY_OWNER where CLIENT_CODE=?

dld.getTaskData=select * from DL_TASK_MASTER  where  CLIENT_CODE=? and IS_ACTIVE=? and ? BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
dld.getFLData=select * from DL_TASK_FLOW_TYPE where CLIENT_CODE=? and UPPER(TASK_REPOSITORY)=? and UPPER(TASK_NAME)=? and VERSION_NO=?
dld.getFQData=select * from DL_TASK_FREQUENCY where CLIENT_CODE=? and UPPER(TASK_REPOSITORY)=? and UPPER(TASK_NAME)=? and VERSION_NO=?
dld.getSTData=select * from DL_TASK_SOURCE_TARGET where CLIENT_CODE=? and UPPER(TASK_REPOSITORY)=? and UPPER(TASK_NAME)=? and VERSION_NO=?


dld.getAllSolutions=select * from vyasasolution where upper(solutionname) not in('DATAHUB','DATA HUB','RECEPTION')
dld.getRuleIds=SELECT DISTINCT RULE_LIST,RULETB.REG_REPORT_ID FROM RF_LINE_RULE_MASTER_TABLE RULETB INNER JOIN (SELECT LINE_ITEM_ID,REG_REPORT_ID,SOLUTION_ID FROM DIM_REG_REPORT_LINE_ITEM WHERE REG_REPORT_ID IN (SELECT REG_REPORT_ID FROM DIM_REG_REPORT WHERE IS_ACTIVE = 'Y' AND SOLUTION_ID=? AND REG_REPORT_ID IN ( SELECT REG_REPORT_ID  FROM DIM_PERIOD_REG_REPORT_LINK WHERE PERIOD_ID =?))) SUB1 ON RULETB.LINE_ITEM_ID = SUB1.LINE_ITEM_ID AND RULETB.REG_REPORT_ID = SUB1.REG_REPORT_ID AND RULETB.SOLUTION_ID = SUB1.SOLUTION_ID AND RULETB.IS_ACTIVE='Y' AND ? BETWEEN RECORD_START_DATE AND RECORD_END_DATE
dld.getEntitiesForRule=SELECT DISTINCT(DF.BUSINESS_NAME) AS FACT_NAME FROM RF_RULE_MASTER_TABLE RF INNER JOIN DIM_FACT_MASTER DF ON RF.SOLUTION_ID= DF.SOLUTION_ID AND RTRIM(LTRIM(RF.FACT_NAME))= RTRIM(LTRIM(DF.FACT_NAME))  WHERE RF.IS_ACTIVE = 'Y' AND RF.IS_DERIVED= 'N' AND ? BETWEEN RF.RECORD_START_DATE AND RF.RECORD_END_DATE AND RF.SOLUTION_ID=? AND (RULE_ID IN (
dld.getSourceStagingSummaryForGrid=SELECT DLF.TASK_NAME,DLF.CLIENT_CODE,DLF.TASK_REPOSITORY,  DLF.FREQUENCY,DLF.OFFSET,DLF.IS_EXCLUSION_INDICATOR,DLEO.OWNER_NAME,DLEO.SOLUTION_ID,DLST.ENTITY_NAME,DLTEL.TASK_STATUS, DLST.LINK_TYPE,DLFT.FLOW_TYPE,DLEO.OWNER_DESCRIPTION,DLEO.CONTACT_DETAILS,DLTEL.RUN_PERIOD_DATE,DLTEL.BUSINESS_PERIOD_DATE,  DTM.TASK_TYPE,DTM.TASK_DESCRIPTION,DE.ENTITY_TYPE,SE.OWNER_NAME AS SOURCE , DE.ENTITY_DESCRIPTION,DE.ENTITY_DETAIL,RD.RUN_COUNT,SE.ENTITY_NAME AS SOURCE_ENTITY,TE.ENTITY_NAME AS TARGET_ENTITY,DLTEL.START_DATE_TIME,DLTEL.END_DATE_TIME,DLTEL.RUN_DETAILS,DTM.TECHNICAL_TASK_NAME FROM DL_TASK_MASTER DTM INNER JOIN DL_TASK_TYPE DTT ON UPPER(DTT.TASK_TYPE) = UPPER(DTM.TASK_TYPE) AND DTT.CLIENT_CODE=DTM.CLIENT_CODE INNER JOIN DL_TASK_FREQUENCY DLF ON UPPER(DLF.TASK_NAME)        = UPPER(DTM.TASK_NAME) AND DLF.CLIENT_CODE     = DTM.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DTM.TASK_REPOSITORY) AND DLF.VERSION_NO = DTM.VERSION_NO INNER JOIN DL_TASK_FLOW_TYPE DLFT ON UPPER(DLF.TASK_NAME)        = UPPER(DLFT.TASK_NAME) AND DLF.CLIENT_CODE     = DLFT.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLFT.TASK_REPOSITORY) AND DLFT.VERSION_NO = DTM.VERSION_NO INNER JOIN DL_TASK_SOURCE_TARGET DLST ON UPPER(DLF.TASK_NAME)        = UPPER(DLST.TASK_NAME) AND DLF.CLIENT_CODE     = DLST.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLST.TASK_REPOSITORY) AND DLST.VERSION_NO = DTM.VERSION_NO INNER JOIN DL_ENTITY_OWNER DLEO ON DLST.CLIENT_CODE = DLEO.CLIENT_CODE AND UPPER(DLST.OWNER_NAME) = UPPER(DLEO.OWNER_NAME) INNER JOIN DL_ENTITY DE ON DLEO.CLIENT_CODE  = DE.CLIENT_CODE AND UPPER(DLEO.OWNER_NAME)  = UPPER(DE.OWNER_NAME) AND UPPER(DLST.ENTITY_NAME) = UPPER(DE.ENTITY_NAME) LEFT OUTER JOIN  (SELECT COUNT(TASK_NAME) AS RUN_COUNT,    TASK_NAME,    CLIENT_CODE,    TASK_REPOSITORY  FROM DL_TASK_EXECUTION_LOG  WHERE BUSINESS_PERIOD_DATE=?  GROUP BY TASK_NAME,    CLIENT_CODE,    TASK_REPOSITORY  ) RD ON UPPER(DLF.TASK_NAME)        = UPPER(RD.TASK_NAME) AND DLF.CLIENT_CODE     = RD.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(RD.TASK_REPOSITORY) LEFT OUTER JOIN  (SELECT * FROM DL_TASK_SOURCE_TARGET WHERE LINK_TYPE = 'S'  ) SE ON UPPER(DLF.TASK_NAME)        = UPPER(SE.TASK_NAME) AND DLF.CLIENT_CODE     = SE.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(SE.TASK_REPOSITORY) AND DTM.VERSION_NO = SE.VERSION_NO LEFT OUTER JOIN  (SELECT * FROM DL_TASK_SOURCE_TARGET WHERE LINK_TYPE = 'T'  ) TE ON UPPER(DLF.TASK_NAME)        = UPPER(TE.TASK_NAME) AND DLF.CLIENT_CODE     = TE.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(TE.TASK_REPOSITORY) AND DTM.VERSION_NO = TE.VERSION_NO LEFT OUTER JOIN  (SELECT D1.*  FROM DL_TASK_EXECUTION_LOG D1  INNER JOIN    (SELECT MAX(SEQUENCE_NUMBER) AS MAX_SEQUENCE_NUMBER,      TASK_NAME,      CLIENT_CODE, TASK_REPOSITORY,     BUSINESS_PERIOD_DATE    FROM DL_TASK_EXECUTION_LOG    WHERE BUSINESS_PERIOD_DATE=?    GROUP BY TASK_NAME,      CLIENT_CODE,   TASK_REPOSITORY,   BUSINESS_PERIOD_DATE    ) D2  ON UPPER(D1.TASK_NAME)                  = UPPER(D2.TASK_NAME)  AND D1.SEQUENCE_NUMBER           = D2.MAX_SEQUENCE_NUMBER AND UPPER(D1.TASK_REPOSITORY)          = UPPER(D2.TASK_REPOSITORY) AND D1.CLIENT_CODE               =D2.CLIENT_CODE  AND D1.BUSINESS_PERIOD_DATE      =D2.BUSINESS_PERIOD_DATE  ) DLTEL ON UPPER(DLTEL.TASK_NAME)       = UPPER(DLF.TASK_NAME) AND DLTEL.CLIENT_CODE              = DLF.CLIENT_CODE AND UPPER(DLTEL.TASK_REPOSITORY)          = UPPER(DLF.TASK_REPOSITORY) WHERE DTM.IS_ACTIVE                = 'Y' AND UPPER(DLST.LINK_TYPE)                 = ? AND UPPER(DLEO.EXTERNAL_SOURCE_INDICATOR) = ? AND DLEO.CLIENT_CODE               = ? AND DLF.IS_EXCLUSION_INDICATOR     ='N' AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE AND DTT.IS_EXECUTABLE_TASK = 'Y' 
dld.getUnplannedTasksForCbd=SELECT DLEL.*,RD.RUN_COUNT FROM DL_TASK_EXECUTION_LOG DLEL INNER JOIN(SELECT COUNT(TASK_NAME) AS RUN_COUNT,TASK_NAME,CLIENT_CODE,TASK_REPOSITORY FROM DL_TASK_EXECUTION_LOG WHERE BUSINESS_PERIOD_DATE=? GROUP BY TASK_NAME,CLIENT_CODE,TASK_REPOSITORY) RD ON UPPER(DLEL.TASK_NAME)        = UPPER(RD.TASK_NAME) AND DLEL.CLIENT_CODE     = RD.CLIENT_CODE AND UPPER(DLEL.TASK_REPOSITORY) = UPPER(RD.TASK_REPOSITORY) INNER JOIN(SELECT MAX(SEQUENCE_NUMBER) AS MAX_SEQ_NUM,TASK_NAME,CLIENT_CODE,TASK_REPOSITORY FROM DL_TASK_EXECUTION_LOG WHERE BUSINESS_PERIOD_DATE= ? GROUP BY TASK_NAME,CLIENT_CODE,TASK_REPOSITORY) MX ON UPPER(DLEL.TASK_NAME)        = UPPER(MX.TASK_NAME) AND DLEL.CLIENT_CODE     = MX.CLIENT_CODE AND UPPER(DLEL.TASK_REPOSITORY) = UPPER(MX.TASK_REPOSITORY) AND DLEL.SEQUENCE_NUMBER = MX.MAX_SEQ_NUM WHERE UPPER(DLEL.TASK_NAME) NOT IN (SELECT UPPER(DLT.TASK_NAME) FROM DL_TASK_FREQUENCY DLT INNER JOIN DL_TASK_EXECUTION_LOG DLTEL ON UPPER(DLT.TASK_NAME) = UPPER(DLTEL.TASK_NAME) AND DLT.CLIENT_CODE = DLTEL.CLIENT_CODE AND UPPER(DLT.TASK_REPOSITORY) = UPPER(DLTEL.TASK_REPOSITORY) AND UPPER(DLT.FREQUENCY) <>?) AND DLEL.BUSINESS_PERIOD_DATE=? AND DLEL.CLIENT_CODE =?

dld.isValidationRequiredOnTask=select IS_VALIDATION_REQUIRED from dl_task_master where UPPER(task_name)=? and ? between EFFECTIVE_START_DATE and EFFECTIVE_END_DATE and client_Code=? and UPPER(TASK_REPOSITORY)=?


dld.getClientMaster=select * from CLIENT_MASTER where client_code=?
dld.getTaskMaxVersion=select max(VERSION_NO) AS VERSION_NO from DL_TASK_MASTER where CLIENT_CODE=? and UPPER(TASK_REPOSITORY)=? and UPPER(TASK_NAME)=?
dld.getTask=select * from DL_TASK_MASTER where CLIENT_CODE=? and UPPER(TASK_REPOSITORY)=? and UPPER(TASK_NAME)=? and IS_ACTIVE=? order by effective_start_date desc
dld.getEntityOwner=select * from DL_ENTITY_OWNER where CLIENT_CODE=? and UPPER(OWNER_NAME)=?
dld.getEntityMaster=select * from DL_ENTITY where CLIENT_CODE=? and UPPER(OWNER_NAME)=? and UPPER(ENTITY_NAME)=?
dld.getFlowType=select * from DL_FLOW_TYPE  where CLIENT_CODE=? and UPPER(FLOW_TYPE)=?
dld.getRepository=select * from DL_TASK_REPOSITORY where CLIENT_CODE=? and UPPER(REPOSITORY_NAME)=?

dld.deactivateTaskMaster=update DL_TASK_MASTER set IS_ACTIVE=? where CLIENT_CODE=? and TASK_REPOSITORY=? and TASK_NAME=? and VERSION_NO=? and EFFECTIVE_START_DATE=?
dld.updateTaskMaster=update DL_TASK_MASTER set EFFECTIVE_END_DATE=?, TASK_TYPE=?, TASK_DESCRIPTION=?,TECHNICAL_TASK_NAME=?,TECHNICAL_SUB_TASK_NAME=?,IS_VALIDATION_REQUIRED=? where CLIENT_CODE=? and TASK_REPOSITORY=? and TASK_NAME=? and VERSION_NO=? and EFFECTIVE_START_DATE=?
dld.updateClient=Update CLIENT_MASTER set CLIENT_DESCRIPTION=? where CLIENT_CODE=?
dld.updateEntityOwner=update DL_ENTITY_OWNER set OWNER_DESCRIPTION=?, EXTERNAL_SOURCE_INDICATOR=?, DATA_SOURCE_ID=?,SOLUTION_ID=?,DISPLAY_ORDER=?,CONTACT_DETAILS=? where CLIENT_CODE=? and OWNER_NAME=?
dld.updateFlowType=update DL_FLOW_TYPE set FLOW_DESCRIPTION=? where CLIENT_CODE=? and FLOW_TYPE=?
dld.updateTaskRep=update DL_TASK_REPOSITORY set REPOSITORY_DESCRIPTION=? where CLIENT_CODE=? and REPOSITORY_NAME=?
dld.updateEntityMaster=update DL_ENTITY set ENTITY_TYPE=?, ENTITY_DETAIL=?, ENTITY_DESCRIPTION=? where CLIENT_CODE=? and OWNER_NAME=? and ENTITY_NAME=?
dld.deleteTaskFlowType=delete from DL_TASK_FLOW_TYPE where CLIENT_CODE=? and TASK_REPOSITORY=? and TASK_NAME=? and VERSION_NO=?
dld.deleteTaskFrequency=delete from  DL_TASK_FREQUENCY where CLIENT_CODE=? and TASK_REPOSITORY=? and TASK_NAME=? and VERSION_NO=?
dld.updateTaskSourceTarget=update DL_TASK_SOURCE_TARGET set OWNER_NAME=?, ENTITY_NAME=?, LINK_TYPE=? where CLIENT_CODE=? and TASK_REPOSITORY=? and TASK_NAME=? and VERSION_NO=? and LINK_TYPE=? and OWNER_NAME=? and ENTITY_NAME=?

dld.getFLDataForDelete=select * from DL_TASK_FLOW_TYPE where CLIENT_CODE=? and TASK_REPOSITORY=? and TASK_NAME=? and VERSION_NO=?
dld.getFQDataForEDit=select * from DL_TASK_FREQUENCY where CLIENT_CODE=? and TASK_REPOSITORY=? and TASK_NAME=? and VERSION_NO=? and FREQUENCY=? and OFFSET=? and IS_EXCLUSION_INDICATOR=?
dld.getSubGridData=SELECT * FROM DL_TASK_EXECUTION_LOG WHERE BUSINESS_PERIOD_DATE=? AND UPPER(TASK_NAME)= ? AND CLIENT_CODE=? AND UPPER(TASK_REPOSITORY)=? ORDER BY SEQUENCE_NUMBER ASC
dld.getReportAndEntityMap=SELECT RULE_LIST,DRR.REPORT_NAME,RULETB.REG_REPORT_ID FROM RF_LINE_RULE_MASTER_TABLE RULETB INNER JOIN (SELECT LINE_ITEM_ID,REG_REPORT_ID,SOLUTION_ID FROM DIM_REG_REPORT_LINE_ITEM WHERE REG_REPORT_ID IN (SELECT REG_REPORT_ID FROM DIM_REG_REPORT WHERE IS_ACTIVE = 'Y' AND SOLUTION_ID=? AND REG_REPORT_ID IN ( SELECT REG_REPORT_ID  FROM DIM_PERIOD_REG_REPORT_LINK WHERE PERIOD_ID =?))) SUB1 ON RULETB.LINE_ITEM_ID = SUB1.LINE_ITEM_ID AND RULETB.REG_REPORT_ID = SUB1.REG_REPORT_ID AND RULETB.SOLUTION_ID = SUB1.SOLUTION_ID AND ? BETWEEN RECORD_START_DATE AND RECORD_END_DATE INNER JOIN DIM_REG_REPORT DRR  ON RULETB.REG_REPORT_ID = DRR.REG_REPORT_ID AND RULETB.SOLUTION_ID   = DRR.SOLUTION_ID
dld.getLineItemDetails=SELECT * FROM (SELECT ROWNUM AS SERIAL_NUMBER,RULETB.RULE_LIST,   SUB1.LINE_ITEM_ID,  SUB1.LINE_ITEM_DESC,  RULETB.REG_REPORT_ID FROM RF_LINE_RULE_MASTER_TABLE RULETB INNER JOIN  (SELECT LINE_ITEM_ID,LINE_ITEM_DESC,    REG_REPORT_ID,    SOLUTION_ID  FROM DIM_REG_REPORT_LINE_ITEM  WHERE REG_REPORT_ID IN    (SELECT REG_REPORT_ID    FROM DIM_REG_REPORT    WHERE IS_ACTIVE    = 'Y' AND SOLUTION_ID    =?    AND REG_REPORT_ID IN      ( SELECT REG_REPORT_ID FROM DIM_PERIOD_REG_REPORT_LINK WHERE PERIOD_ID =?      )    )  AND REG_REPORT_ID = ?) SUB1 ON RULETB.LINE_ITEM_ID   = SUB1.LINE_ITEM_ID AND RULETB.REG_REPORT_ID = SUB1.REG_REPORT_ID AND RULETB.SOLUTION_ID   = SUB1.SOLUTION_ID  AND RULETB.IS_ACTIVE='Y' WHERE SUB1.LINE_ITEM_ID LIKE ? AND SUB1.LINE_ITEM_DESC LIKE ?)WHERE SERIAL_NUMBER >= ? AND SERIAL_NUMBER <=?
dld.getLineItemTotal=SELECT COUNT(*) FROM RF_LINE_RULE_MASTER_TABLE RULETB INNER JOIN  (SELECT LINE_ITEM_ID,LINE_ITEM_DESC,    REG_REPORT_ID,    SOLUTION_ID  FROM DIM_REG_REPORT_LINE_ITEM  WHERE REG_REPORT_ID IN    (SELECT REG_REPORT_ID    FROM DIM_REG_REPORT    WHERE IS_ACTIVE    = 'Y'    AND SOLUTION_ID    =?  AND REG_REPORT_ID IN      ( SELECT REG_REPORT_ID FROM DIM_PERIOD_REG_REPORT_LINK WHERE PERIOD_ID =?      )    ) AND REG_REPORT_ID = ?  ) SUB1 ON RULETB.LINE_ITEM_ID   = SUB1.LINE_ITEM_ID AND RULETB.REG_REPORT_ID = SUB1.REG_REPORT_ID AND RULETB.SOLUTION_ID   = SUB1.SOLUTION_ID WHERE SUB1.LINE_ITEM_ID LIKE ? AND SUB1.LINE_ITEM_DESC LIKE ?
dld.getReportAndFlag=SELECT REPORT_NAME,SHOW_LINE_ITEM_DETAILS,SOLUTION_ID FROM DIM_REG_REPORT WHERE IS_ACTIVE = 'Y' AND SOLUTION_ID= ?

dld.getTaskTypeData=select * from DL_TASK_TYPE WHERE CLIENT_CODE=?
dld.getEntityTypeData=select * from DL_ENTITY_TYPE WHERE CLIENT_CODE=?
dld.getDependentTaskNameFromTargetEntity=select * from dl_task_source_target where SOURCE_ENTITY in (select SOURCE_ENTITY from dl_task_Source_Target where LINK_TYPE='S' and UPPER(task_name)=? and client_code =? and UPPER(repositry_name)=? and version_no=?) and client_code=? and link_type='T'
dld.getTaskStatusForLinage=select task_Status from dl_task_execution_log where UPPER(task_name)=? and client_code=? and UPPER(task_repository)=? and business_period_Date=? order by sequence_number desc
dld.getExcludedSolution=select * from vyasasolution where upper(solutionname) not in('DATAHUB','DATA HUB','RECEPTION') and upper(solutionname)!=? and CLIENT_CODE=?
dld.isTaskExecutable=select IS_EXECUTABLE_TASK from DL_TASK_TYPE where upper(task_type)=? and CLIENT_CODE=?
dld.getAllFrequency=select frequency_name from frequency_master
dld.getAllLineItemDetails=SELECT * FROM (SELECT ROWNUM AS SERIAL_NUMBER,RULETB.RULE_LIST,   SUB1.LINE_ITEM_ID,  SUB1.LINE_ITEM_DESC,  RULETB.REG_REPORT_ID FROM RF_LINE_RULE_MASTER_TABLE RULETB INNER JOIN  (SELECT LINE_ITEM_ID,LINE_ITEM_DESC,    REG_REPORT_ID,    SOLUTION_ID  FROM DIM_REG_REPORT_LINE_ITEM  WHERE REG_REPORT_ID IN    (SELECT REG_REPORT_ID    FROM DIM_REG_REPORT    WHERE IS_ACTIVE    = 'Y'    AND SOLUTION_ID    =?    AND REG_REPORT_ID IN      ( SELECT REG_REPORT_ID FROM DIM_PERIOD_REG_REPORT_LINK WHERE PERIOD_ID =?      )    )  AND REG_REPORT_ID = ?) SUB1 ON RULETB.LINE_ITEM_ID   = SUB1.LINE_ITEM_ID AND RULETB.REG_REPORT_ID = SUB1.REG_REPORT_ID AND RULETB.SOLUTION_ID   = SUB1.SOLUTION_ID  WHERE SUB1.LINE_ITEM_ID LIKE ? AND SUB1.LINE_ITEM_DESC LIKE ?)
dld.getParentRuleIds=SELECT RULE_LIST FROM RF_RULE_MASTER_TABLE WHERE SOLUTION_ID=? and ? between record_start_date and record_end_Date and is_Active='Y' and is_derived='Y' and (rule_id in(
dld.taskQueryLineage=select TF.* from  dl_task_frequency tf INNER JOIN DL_TASK_MASTER DTM ON tf.VERSION_NO             = DTM.VERSION_NO AND TF.CLIENT_CODE           =DTM.CLIENT_CODE AND UPPER(TF.TASK_NAME)             = UPPER(DTM.TASK_NAME) AND TF.CLIENT_CODE             = DTM.CLIENT_CODE INNER JOIN DL_TASK_TYPE DTT ON UPPER(DTT.TASK_TYPE) = UPPER(DTM.TASK_TYPE) AND DTT.CLIENT_CODE=DTM.CLIENT_CODE where tf.client_code=? AND TF.IS_EXCLUSION_INDICATOR='N' AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE AND DTM.IS_ACTIVE = 'Y' and UPPER(tf.frequency) in (
dld.getEntityAndTypeQuery=SELECT DLEO.OWNER_NAME,  DLST.ENTITY_NAME,DTT.IS_EXECUTABLE_TASK FROM DL_TASK_MASTER DTM INNER JOIN DL_TASK_TYPE DTT ON UPPER(DTT.TASK_TYPE) = UPPER(DTM.TASK_TYPE) AND DTT.CLIENT_CODE=DTM.CLIENT_CODE INNER JOIN DL_TASK_FREQUENCY DLF ON UPPER(DLF.TASK_NAME) = UPPER(DTM.TASK_NAME) AND DLF.VERSION_NO = DTM.VERSION_NO AND DLF.CLIENT_CODE     = DTM.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DTM.TASK_REPOSITORY) INNER JOIN DL_TASK_FLOW_TYPE DLFT ON UPPER(DLF.TASK_NAME)        = UPPER(DLFT.TASK_NAME) AND DLF.CLIENT_CODE     = DLFT.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLFT.TASK_REPOSITORY) AND DLF.VERSION_NO = DLFT.VERSION_NO  INNER JOIN DL_TASK_SOURCE_TARGET DLST ON UPPER(DLF.TASK_NAME)        = UPPER(DLST.TASK_NAME) AND DLF.CLIENT_CODE     = DLST.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLST.TASK_REPOSITORY) AND DLF.VERSION_NO = DLST.VERSION_NO INNER JOIN DL_ENTITY_OWNER DLEO ON DLST.CLIENT_CODE = DLEO.CLIENT_CODE AND UPPER(DLST.OWNER_NAME) = UPPER(DLEO.OWNER_NAME) INNER JOIN DL_ENTITY DE ON DLEO.CLIENT_CODE  = DE.CLIENT_CODE AND UPPER(DLEO.OWNER_NAME)  = UPPER(DE.OWNER_NAME) AND UPPER(DLST.ENTITY_NAME) = UPPER(DE.ENTITY_NAME) LEFT OUTER JOIN  (SELECT D1.*  FROM DL_TASK_EXECUTION_LOG D1  INNER JOIN    (SELECT MAX(SEQUENCE_NUMBER) AS MAX_SEQUENCE_NUMBER,      TASK_NAME,      CLIENT_CODE,  TASK_REPOSITORY,    BUSINESS_PERIOD_DATE    FROM DL_TASK_EXECUTION_LOG    WHERE BUSINESS_PERIOD_DATE=?    GROUP BY TASK_NAME,     TASK_REPOSITORY, CLIENT_CODE,      BUSINESS_PERIOD_DATE    ) D2  ON UPPER(D1.TASK_NAME)                  = UPPER(D2.TASK_NAME) AND UPPER(D1.TASK_REPOSITORY) = UPPER(D2.TASK_REPOSITORY)  AND D1.SEQUENCE_NUMBER           = D2.MAX_SEQUENCE_NUMBER  AND D1.CLIENT_CODE               =D2.CLIENT_CODE  AND D1.BUSINESS_PERIOD_DATE      =D2.BUSINESS_PERIOD_DATE  ) DLTEL ON UPPER(DLTEL.TASK_NAME)       = UPPER(DLF.TASK_NAME) AND DLTEL.CLIENT_CODE              = DLF.CLIENT_CODE AND UPPER(DLTEL.TASK_REPOSITORY)          = UPPER(DLF.TASK_REPOSITORY) WHERE UPPER(DLST.LINK_TYPE)               = 'T' AND UPPER(DLEO.EXTERNAL_SOURCE_INDICATOR) = 'N' AND DLEO.CLIENT_CODE               = ? AND DLF.IS_EXCLUSION_INDICATOR     ='N' AND DTM.IS_ACTIVE = 'Y' AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE
dld.getAllTaskStatusApplicableForCBD=SELECT DLF.TASK_NAME,  DLF.CLIENT_CODE,  DLF.TASK_REPOSITORY,  DLF.FREQUENCY,  DLF.OFFSET,  DLF.IS_EXCLUSION_INDICATOR,  DLEO.OWNER_NAME,DLEO.SOLUTION_ID,  DLST.ENTITY_NAME,  DLTEL.TASK_STATUS,  DLST.LINK_TYPE,  DLFT.FLOW_TYPE FROM DL_TASK_MASTER DTM INNER JOIN DL_TASK_TYPE DTT ON UPPER(DTT.TASK_TYPE) = UPPER(DTM.TASK_TYPE) AND DTT.CLIENT_CODE=DTM.CLIENT_CODE INNER JOIN DL_TASK_FREQUENCY DLF ON UPPER(DLF.TASK_NAME) = UPPER(DTM.TASK_NAME) AND DLF.VERSION_NO = DTM.VERSION_NO AND DLF.CLIENT_CODE     = DTM.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DTM.TASK_REPOSITORY) INNER JOIN DL_TASK_FLOW_TYPE DLFT ON UPPER(DLF.TASK_NAME)        = UPPER(DLFT.TASK_NAME) AND DLF.CLIENT_CODE     = DLFT.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLFT.TASK_REPOSITORY) AND DLF.VERSION_NO = DLFT.VERSION_NO  INNER JOIN DL_TASK_SOURCE_TARGET DLST ON UPPER(DLF.TASK_NAME)        = UPPER(DLST.TASK_NAME) AND DLF.CLIENT_CODE     = DLST.CLIENT_CODE AND UPPER(DLF.TASK_REPOSITORY) = UPPER(DLST.TASK_REPOSITORY) AND DLF.VERSION_NO = DLST.VERSION_NO INNER JOIN DL_ENTITY_OWNER DLEO ON DLST.CLIENT_CODE = DLEO.CLIENT_CODE AND UPPER(DLST.OWNER_NAME) = UPPER(DLEO.OWNER_NAME) INNER JOIN DL_ENTITY DE ON DLEO.CLIENT_CODE  = DE.CLIENT_CODE AND UPPER(DLEO.OWNER_NAME)  = UPPER(DE.OWNER_NAME) AND UPPER(DLST.ENTITY_NAME) = UPPER(DE.ENTITY_NAME) LEFT OUTER JOIN  (SELECT D1.*  FROM DL_TASK_EXECUTION_LOG D1  INNER JOIN    (SELECT MAX(SEQUENCE_NUMBER) AS MAX_SEQUENCE_NUMBER,      TASK_NAME,      CLIENT_CODE,  TASK_REPOSITORY,    BUSINESS_PERIOD_DATE    FROM DL_TASK_EXECUTION_LOG    WHERE BUSINESS_PERIOD_DATE=?  AND CLIENT_CODE=?  GROUP BY TASK_NAME,     TASK_REPOSITORY, CLIENT_CODE,      BUSINESS_PERIOD_DATE    ) D2  ON UPPER(D1.TASK_NAME)                  = UPPER(D2.TASK_NAME) AND UPPER(D1.TASK_REPOSITORY) = UPPER(D2.TASK_REPOSITORY)  AND D1.SEQUENCE_NUMBER           = D2.MAX_SEQUENCE_NUMBER  AND D1.CLIENT_CODE               =D2.CLIENT_CODE  AND D1.BUSINESS_PERIOD_DATE      =D2.BUSINESS_PERIOD_DATE  ) DLTEL ON UPPER(DLTEL.TASK_NAME)       = UPPER(DLF.TASK_NAME) AND DLTEL.CLIENT_CODE = DLF.CLIENT_CODE AND UPPER(DLTEL.TASK_REPOSITORY)          = UPPER(DLF.TASK_REPOSITORY) WHERE DLEO.CLIENT_CODE = ? AND DLF.IS_EXCLUSION_INDICATOR ='N' AND DTM.IS_ACTIVE = 'Y' AND ? BETWEEN DTM.EFFECTIVE_START_DATE AND DTM.EFFECTIVE_END_DATE AND DTT.IS_EXECUTABLE_TASK = 'Y' AND UPPER(DLF.FREQUENCY) IN  (
dld.getLineItemDetailsForMssql=SELECT * FROM (SELECT ROW_NUMBER() OVER(order by (Select 0)) AS SERIAL_NUMBER,RULETB.RULE_LIST,   SUB1.LINE_ITEM_ID,  SUB1.LINE_ITEM_DESC,  RULETB.REG_REPORT_ID FROM RF_LINE_RULE_MASTER_TABLE RULETB INNER JOIN  (SELECT LINE_ITEM_ID,LINE_ITEM_DESC,    REG_REPORT_ID,    SOLUTION_ID  FROM DIM_REG_REPORT_LINE_ITEM  WHERE REG_REPORT_ID IN    (SELECT REG_REPORT_ID    FROM DIM_REG_REPORT    WHERE IS_ACTIVE    = 'Y'    AND SOLUTION_ID    =?    AND REG_REPORT_ID IN      ( SELECT REG_REPORT_ID FROM DIM_PERIOD_REG_REPORT_LINK WHERE PERIOD_ID =?      )    )  AND REG_REPORT_ID = ?) SUB1 ON RULETB.LINE_ITEM_ID   = SUB1.LINE_ITEM_ID AND RULETB.REG_REPORT_ID = SUB1.REG_REPORT_ID AND RULETB.SOLUTION_ID   = SUB1.SOLUTION_ID AND RULETB.IS_ACTIVE='Y'  WHERE SUB1.LINE_ITEM_ID LIKE ? AND SUB1.LINE_ITEM_DESC LIKE ?) AS A WHERE SERIAL_NUMBER >= ? AND SERIAL_NUMBER <=?
dld.getAllLineItemDetailsForMssql=SELECT * FROM (SELECT ROW_NUMBER() OVER(order by (Select 0)) AS SERIAL_NUMBER,RULETB.RULE_LIST,   SUB1.LINE_ITEM_ID,  SUB1.LINE_ITEM_DESC,  RULETB.REG_REPORT_ID FROM RF_LINE_RULE_MASTER_TABLE RULETB INNER JOIN  (SELECT LINE_ITEM_ID,LINE_ITEM_DESC,    REG_REPORT_ID,    SOLUTION_ID  FROM DIM_REG_REPORT_LINE_ITEM  WHERE REG_REPORT_ID IN    (SELECT REG_REPORT_ID    FROM DIM_REG_REPORT    WHERE IS_ACTIVE    = 'Y'    AND SOLUTION_ID    =?    AND REG_REPORT_ID IN      ( SELECT REG_REPORT_ID FROM DIM_PERIOD_REG_REPORT_LINK WHERE PERIOD_ID =?      )    )  AND REG_REPORT_ID = ?) SUB1 ON RULETB.LINE_ITEM_ID   = SUB1.LINE_ITEM_ID AND RULETB.REG_REPORT_ID = SUB1.REG_REPORT_ID AND RULETB.SOLUTION_ID   = SUB1.SOLUTION_ID  WHERE SUB1.LINE_ITEM_ID LIKE ? AND SUB1.LINE_ITEM_DESC LIKE ?) AS A